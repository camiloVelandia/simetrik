{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case \"SET_COUNTRY_BY_NAME\":\n      {\n        var list = [state.conciliaciones];\n        var infoFiltered = list[0].filter(function (item) {\n          return console.log(item.index);\n        } // ityem.name.toLowerCase().includes(action.payload.toLowerCase())\n        );\n        return _objectSpread(_objectSpread({}, state), {}, {\n          infoFiltered: infoFiltered\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/mnt/c/Users/cmax9/documents/Developer/simetrik/reducers/index.js"],"names":["reducer","state","action","type","list","conciliaciones","infoFiltered","filter","item","console","log","index"],"mappings":";;;;;;AAAA,eAAe,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAK,qBAAL;AAA4B;AAC1B,YAAIC,IAAI,GAAE,CAACH,KAAK,CAACI,cAAP,CAAV;AACA,YAAMC,YAAY,GAAGF,IAAI,CAAC,CAAD,CAAJ,CAAQG,MAAR,CAAe,UAACC,IAAD;AAAA,iBACpCC,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,KAAjB,CADoC;AAAA,SAAf,CAEnB;AAFmB,SAArB;AAIA,+CAAYV,KAAZ;AAAmBK,UAAAA,YAAY,EAAZA;AAAnB;AACD;;AAGD;AAAS;AACP,eAAOL,KAAP;AACD;AAdH;AAgBD","sourcesContent":["export default function reducer(state, action) {\n  switch (action.type) {\n\n    case \"SET_COUNTRY_BY_NAME\": {\n      let list= [state.conciliaciones]\n      const infoFiltered = list[0].filter((item) =>\n      console.log(item.index)\n        // ityem.name.toLowerCase().includes(action.payload.toLowerCase())\n      );\n      return { ...state, infoFiltered };\n    }\n\n\n    default: {\n      return state;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}