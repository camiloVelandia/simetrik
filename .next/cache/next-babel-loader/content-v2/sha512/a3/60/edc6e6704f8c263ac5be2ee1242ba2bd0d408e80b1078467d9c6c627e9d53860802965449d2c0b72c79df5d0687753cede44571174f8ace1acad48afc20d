{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case \"SET_COUNTRY_BY_NAME\":\n      {\n        let list = state;\n        const infoFiltered = list.filter(country => country.name.toLowerCase().includes(action.payload.toLowerCase()));\n        return _objectSpread(_objectSpread({}, state), {}, {\n          infoFiltered\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/mnt/c/Users/cmax9/documents/Developer/simetrik/reducers/index.js"],"names":["reducer","state","action","type","list","infoFiltered","filter","country","name","toLowerCase","includes","payload"],"mappings":";;;;;;AAAA,eAAe,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAK,qBAAL;AAA4B;AAC1B,YAAIC,IAAI,GAAEH,KAAV;AACA,cAAMI,YAAY,GAAGD,IAAI,CAACE,MAAL,CAAaC,OAAD,IAC/BA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,CAAoCR,MAAM,CAACS,OAAP,CAAeF,WAAf,EAApC,CADmB,CAArB;AAGA,+CAAYR,KAAZ;AAAmBI,UAAAA;AAAnB;AACD;;AAGD;AAAS;AACP,eAAOJ,KAAP;AACD;AAbH;AAeD","sourcesContent":["export default function reducer(state, action) {\n  switch (action.type) {\n\n    case \"SET_COUNTRY_BY_NAME\": {\n      let list= state\n      const infoFiltered = list.filter((country) =>\n        country.name.toLowerCase().includes(action.payload.toLowerCase())\n      );\n      return { ...state, infoFiltered };\n    }\n\n\n    default: {\n      return state;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}